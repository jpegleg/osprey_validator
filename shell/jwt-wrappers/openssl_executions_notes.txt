Using openssl signing is the approach used in the "Osprey 1" prototype.

Getting a signed token via authenticated TLS:

```
curl -E myclientkeycert.pem https://someserver.local/create.cgi
935d01c96d86a8ffe76b55e1c29259f887b7e787ff8e412077852a9f130f7f277a497c3a8cc3f0e4fbb2f1f600cf17372f3d33a1ab05f8c0764ee3d394884721e91cca3a0b690bff8cbde233aaba8eac1cf9aa6e234e04ee9d2da08d864d99e15792faa07bc80bdccefc49012b108b71886eba00a058a6963bb28bdc9c42b508fdff2266160e316ecc5360ed452ea273971af8e1aadf288cd2cc0423ed7c7fc68e7e8b3f59166b0ac8cc8fad83cff55f66c6945eb711a4df53e0bc88c4fd78fa5b65ab12fca8922e32853b40b85aeeb093ae5b657ddd1679c6930a29ea4b725c37506bef1dc7a948d3d800dfa5952e4bab44011ca42b2eb66863c0093fceebda
```

Using the signed token to get access to the demo royal blobs service:

```
curl -E auth.pem -k https://open-box:444/validate.cgi?935d01c96d86a8ffe76b55e1c29259f887b7e787ff8e412077852a9f130f7f277a497c3a8cc3f0e4fbb2f1f600cf17372f3d33a1ab05f8c0764ee3d394884721e91cca3a0b690bff8cbde233aaba8eac1cf9aa6e234e04ee9d2da08d864d99e15792faa07bc80bdccefc49012b108b71886eba00a058a6963bb28bdc9c42b508fdff2266160e316ecc5360ed452ea273971af8e1aadf288cd2cc0423ed7c7fc68e7e8b3f59166b0ac8cc8fad83cff55f66c6945eb711a4df53e0bc88c4fd78fa5b65ab12fca8922e32853b40b85aeeb093ae5b657ddd1679c6930a29ea4b725c37506bef1dc7a948d3d800dfa5952e4bab44011ca42b2eb66863c0093fceebda
royal_blobs_jwt_service ADMIN 2
```
